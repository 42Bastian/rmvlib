%!PS-Adobe-3.0
%%Title: display.s
%%For: Briais Sebastien
%%Creator: a2ps version 4.13
%%CreationDate: Thu Nov 22 19:30:26 2007
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(; The Removers'Library ) p n
(; Copyright \(C\) 2006 Seb/The Removers) N
(; http://removers.atari.org/) N
() S 8 T () N
(; This library is free software; you can redistribute it and/or ) N
(; modify it under the terms of the GNU Lesser General Public ) N
(; License as published by the Free Software Foundation; either ) N
(; version 2.1 of the License, or \(at your option\) any later version. ) N
() N
(; This library is distributed in the hope that it will be useful, ) N
(; but WITHOUT ANY WARRANTY; without even the implied warranty of ) N
(; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU ) N
(; Lesser General Public License for more details. ) N
() N
(; You should have received a copy of the GNU Lesser General Public ) N
(; License along with this library; if not, write to the Free Software ) N
(; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA) N
( ) N
() N
() S 8 T (include) S 16 T ("jaguar.inc") N
() N
() S 8 T (.if) S 16 T (^^) S
(defined) K
() p 32 T (DISPLAY_H) N
() S 8 T (.print) S 16 T ("sprites.s already included") N
() S 8 T (end) N
() S 8 T (.endif) N
(DISPLAY_H) S 16 T (equ) S 24 T (1) N
() S 8 T (.print) S 16 T ("including display.s") N
() N
() S 8 T (include) S 16 T ("display_def.s") N
() S 8 T () N
() S 8 T (.extern) S 16 T (_a_vdb) N
() S 8 T (.extern) S 16 T (_bcopy) N
() S 8 T (.extern) S 16 T (_vblCounter) N
() S 8 T (.extern) S 16 T (_stop_object) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T (include) S 16 T ("display_cfg.s") N
() N
(GPU_STACK_SIZE) S 16 T () S 24 T (equ) S 32 T (32) S 40 T (; in long words) N
() S 8 T () N
(; ) S 8 T (.bss) N
(; ) S 8 T (.phrase) N
(; gpu_isp:) S 16 T (ds.l) S 24 T (GPU_STACK_SIZE) N
(; ) S 8 T (.phrase) N
(; gpu_usp:) S 16 T (ds.l) S 24 T (GPU_STACK_SIZE) N
(; GPU_ISP) S 16 T (equ) S 24 T (gpu_isp) N
(; GPU_USP) S 16 T (equ) S 24 T (gpu_usp) N
(GPU_USP) S 8 T (equ) S 16 T (\(G_ENDRAM-\(4*GPU_STACK_SIZE\)\)) N
(GPU_ISP) S 8 T (equ) S 16 T (\(GPU_USP-\(4*GPU_STACK_SIZE\)\)) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S
(.text) K n
() p 8 T (.68000) N
() N
(.macro) S 8 T (padding_nop) N
() S 8 T (.print) S 16 T ("adding ",\\1/2," padding nop") N
() S 8 T (.rept) S 16 T (\(\\1 / 2\)) N
() S 8 T (nop) N
() S 8 T (.endr) N
(.endm) N
() N
(.macro) S 8 T (push) N
() S 8 T (;; push \\1 on stack) N
() S 8 T (subqt) S 16 T (#4,r31) N
(display.s) (Page 1/12) (01 sep 07 11:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (store) S 16 T (\\1,\(r31\)) N
(.endm) N
() N
(.macro) S 8 T (pop) N
() S 8 T (;; pop \\1 from stack) N
() S 8 T (load) S 16 T (\(r31\),\\1) N
() S 8 T (addqt) S 16 T (#4,r31) N
(.endm) N
() N
(.macro) S 8 T (display_save_first_regs) N
() S 8 T (push) S 16 T (r1) N
() S 8 T (push) S 16 T (r2) N
() S 8 T (push) S 16 T (r14) N
() S 8 T (push) S 16 T (r15) N
(.endm) N
() N
(.macro) S 8 T (display_restore_first_regs) N
() S 8 T (pop) S 16 T (r15) N
() S 8 T (pop) S 16 T (r14) N
() S 8 T (pop) S 16 T (r2) N
() S 8 T (pop) S 16 T (r1) N
(.endm) S 8 T () N
() S 8 T () S 16 T () N
(.macro) S 8 T (display_save_other_regs) N
() S 8 T (push) S 16 T (r0) N
(*) S 8 T (push) S 16 T (r1) N
(*) S 8 T (push) S 16 T (r2) N
() S 8 T (push) S 16 T (r3) N
() S 8 T (push) S 16 T (r4) N
() S 8 T (push) S 16 T (r5) N
() S 8 T (push) S 16 T (r6) N
() S 8 T (push) S 16 T (r7) N
() S 8 T (push) S 16 T (r8) N
() S 8 T (push) S 16 T (r9) N
() S 8 T (push) S 16 T (r10) N
() S 8 T (push) S 16 T (r11) N
() S 8 T (push) S 16 T (r12) N
() S 8 T (push) S 16 T (r13) N
(*) S 8 T (push) S 16 T (r14) N
(*) S 8 T (push) S 16 T (r15) N
() S 8 T (push) S 16 T (r16) N
() S 8 T (push) S 16 T (r17) N
() S 8 T (push) S 16 T (r18) N
() S 8 T (push) S 16 T (r19) N
() S 8 T (push) S 16 T (r20) N
() S 8 T (push) S 16 T (r21) N
() S 8 T (push) S 16 T (r22) N
() S 8 T (push) S 16 T (r23) N
() S 8 T (push) S 16 T (r24) N
() S 8 T (push) S 16 T (r25) N
() S 8 T (push) S 16 T (r26) N
() S 8 T (push) S 16 T (r27) N
(.endm) N
() N
(.macro) S 8 T (display_restore_other_regs) N
() S 8 T (pop) S 16 T (r27) N
() S 8 T (pop) S 16 T (r26) N
() S 8 T (pop) S 16 T (r25) N
() S 8 T (pop) S 16 T (r24) N
() S 8 T (pop) S 16 T (r23) N
() S 8 T (pop) S 16 T (r22) N
() S 8 T (pop) S 16 T (r21) N
(display.s) (Page 2/12) (01 sep 07 11:30) title
border
grestore
(Imprim\351 par Briais Sebastien) rhead
(display.s) (1/6) (jeudi 22 novembre 2007) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (pop) S 16 T (r20) N
() S 8 T (pop) S 16 T (r19) N
() S 8 T (pop) S 16 T (r18) N
() S 8 T (pop) S 16 T (r17) N
() S 8 T (pop) S 16 T (r16) N
(*) S 8 T (pop) S 16 T (r15) N
(*) S 8 T (pop) S 16 T (r14) N
() S 8 T (pop) S 16 T (r13) N
() S 8 T (pop) S 16 T (r12) N
() S 8 T (pop) S 16 T (r11) N
() S 8 T (pop) S 16 T (r10) N
() S 8 T (pop) S 16 T (r9) N
() S 8 T (pop) S 16 T (r8) N
() S 8 T (pop) S 16 T (r7) N
() S 8 T (pop) S 16 T (r6) N
() S 8 T (pop) S 16 T (r5) N
() S 8 T (pop) S 16 T (r4) N
() S 8 T (pop) S 16 T (r3) N
(*) S 8 T (pop) S 16 T (r2) N
(*) S 8 T (pop) S 16 T (r1) N
() S 8 T (pop) S 16 T (r0) N
(.endm) N
() N
(;;; the GPU display driver) N
(;;; for sake of simplicity, it clears the interrupt handlers) N
(;;; so you shoud install your own interrupts after having initialised) N
(;;; the display driver) N
(;;; this code is not self-relocatable) N
() S 8 T (.phrase) N
(gpu_display_driver:) N
() S 8 T (.gpu) N
() S 8 T (.org) S 16 T (G_RAM) N
(.gpu_display_driver_begin:) N
() S 8 T (;; CPU interrupt) N
() S 8 T (.if) S 16 T (!DISPLAY_USE_OP_IT) N
() S 8 T (movei) S 16 T (#.gpu_display_from_cpu_it,r28) N
() S 8 T (movei) S 16 T (#G_FLAGS,r30) N
() S 8 T (jump) S 16 T (\(r28\)) N
() S 8 T (load) S 16 T (\(r30\),r29) S 32 T (; get flags) N
() S 8 T (.endif) N
() S 8 T (padding_nop) S 24 T (\(G_RAM+$10-*\)) N
() S 8 T (;; ) N
() S 8 T (.org) S 16 T (G_RAM+$10) N
() S 8 T (;; DSP interrupt) N
() S 8 T (padding_nop) S 24 T ($10) N
() S 8 T (;; ) N
() S 8 T (.org) S 16 T (G_RAM+$20) N
() S 8 T (;; Timing interrupt) N
() S 8 T (padding_nop) S 24 T ($10) N
() S 8 T (;; ) N
() S 8 T (.org) S 16 T (G_RAM+$30) N
() S 8 T (;; OP interrupt) N
() S 8 T (.if) S 16 T (DISPLAY_USE_OP_IT) N
() S 8 T (movei) S 16 T (#.gpu_display_from_op_it,r28) N
() S 8 T (movei) S 16 T (#G_FLAGS,r30) N
() S 8 T (jump) S 16 T (\(r28\)) N
() S 8 T (load) S 16 T (\(r30\),r29) S 32 T (; get flags) N
() S 8 T (.endif) N
() S 8 T (padding_nop) S 24 T (\(G_RAM+$40-*\)) N
() S 8 T (;; ) N
() S 8 T (.org) S 16 T (G_RAM+$40) S 32 T () N
() S 8 T (;; Blitter interrupt) N
(display.s) (Page 3/12) (01 sep 07 11:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (padding_nop) S 24 T ($10) N
() S 8 T (.org) S 16 T (G_RAM+$50) N
(.macro) S 8 T (gpu_display_swap_lists) N
() S 8 T (;; r15 is display list address) N
() S 8 T (load) S 16 T (\(r15+DISPLAY_LOG/4\),r1 ; logical list) N
() S 8 T (load) S 16 T (\(r15+DISPLAY_PHYS/4\),r14 ; physical list) N
() S 8 T (store) S 16 T (r1,\(r15+DISPLAY_PHYS/4\)) S 40 T (; logical becomes physical) N
() S 8 T (store) S 16 T (r14,\(r15+DISPLAY_LOG/4\)) S 40 T (; physical becomes logical) N
() S 8 T (.if) S 16 T (DISPLAY_SWAP_METHOD) N
() S 8 T (shrq) S 16 T (#3,r1) S 24 T () S 32 T (; physical list address in phrases) N
() S 8 T (load) S 16 T (\(r15+\(DISPLAY_LIST_OB4+4\)/4\),r2) S 48 T (; read BRANCH object) N
() S 8 T (move) S 16 T (r1,r28) S 24 T () S 32 T (; copy address) N
() S 8 T (shlq) S 16 T (#15,r2) N
() S 8 T (shrq) S 16 T (#8,r1) S 24 T () S 32 T (; high bits of BRANCH object) N
() S 8 T (shrq) S 16 T (#15,r2) N
() S 8 T (shlq) S 16 T (#24,r28) N
() S 8 T (or) S 16 T (r28,r2) S 24 T () S 32 T (; low bits) N
() S 8 T (store) S 16 T (r1,\(r15+DISPLAY_LIST_OB4/4\)) N
() S 8 T (store) S 16 T (r2,\(r15+\(\(DISPLAY_LIST_OB4+4\)/4\)\)) N
() S 8 T (.else) N
() S 8 T (movei) S 16 T (#OLP,r2) N
() S 8 T (rorq) S 16 T (#16,r1) S 24 T () S 32 T (; word swapped) N
() S 8 T (store) S 16 T (r1,\(r2\)) N
() S 8 T (.endif) N
(.endm) N
() S 8 T (.if) S 16 T (!DISPLAY_USE_OP_IT) N
(.gpu_display_from_cpu_it:) N
() S 8 T (.if) S 16 T (DISPLAY_IT_SAVE_REGS) N
() S 8 T (display_save_first_regs) N
() S 8 T (.endif) N
() S 8 T (movei) S 16 T (#active_display_list,r1) N
() S 8 T (load) S 16 T (\(r1\),r15) N
() S 8 T (gpu_display_swap_lists) N
() S 8 T (.if) S 16 T (DISPLAY_BG_IT) N
() S 8 T (movei) S 16 T (#DISPLAY_BG_CPU) S
(|DISPLAY_BG_SWAP,r1) c n
() p 8 T (.endif) N
(*) S 8 T (movei) S 16 T (#.gpu_display_main,r28) N
() S 8 T () S
(bset) K
() p 16 T (#9,r29) S 24 T () S 32 T (; clear latch 0) N
(*) S 8 T (jump) S 16 T (\(r28\)) N
(*) S 8 T (nop) N
() S 8 T (.else) N
(.gpu_display_from_op_it:) N
() S 8 T (.if) S 16 T (DISPLAY_IT_SAVE_REGS) N
() S 8 T (display_save_first_regs) N
() S 8 T (.endif) N
() S 8 T (.if) S 16 T (DISPLAY_OP_IT_COMP_PT) N
() S 8 T (movei) S 16 T (#active_display_list,r1) N
() S 8 T (load) S 16 T (\(r1\),r15) N
() S 8 T (.else) N
() S 8 T (movei) S 16 T (#OB2,r1) N
() S 8 T (load) S 16 T (\(r1\),r15) N
() S 8 T (rorq) S 16 T (#16,r15) N
() S 8 T (.endif) N
() S 8 T (gpu_display_swap_lists) N
() S 8 T (.if) S 16 T (DISPLAY_BG_IT) N
() S 8 T (movei) S 16 T (#DISPLAY_BG_OP) S
(|DISPLAY_BG_SWAP,r1) c 56 T (; BLUE) N
() p 8 T (.endif) N
() S 8 T (movei) S 16 T (#OBF,r28) N
() S 8 T (storew) S 16 T (r28,\(r28\)) S 32 T (; relaunch OP) N
(*) S 8 T (movei) S 16 T (#.gpu_display_main,r28) N
() S 8 T () S
(bset) K
() p 16 T (#12,r29) S 24 T () S 32 T (; clear latch 3) N
(*) S 8 T (jump) S 16 T (\(r28\)) N
(display.s) (Page 4/12) (01 sep 07 11:30) title
border
grestore
(Imprim\351 par Briais Sebastien) rhead
(display.s) (2/6) (jeudi 22 novembre 2007) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*) p 8 T (nop) N
() S 8 T (.endif) N
(.gpu_display_main:) N
() S 8 T (.if) S 16 T (DISPLAY_IT_SAVE_REGS) N
() S 8 T (display_save_other_regs) N
() S 8 T (.endif) N
() S 8 T (.if) S 16 T (DISPLAY_BG_IT) N
() S 8 T (movei) S 16 T (#BG,r2) N
() S 8 T (or) S 16 T (r2,r2) N
() S 8 T (storew) S 16 T (r1,\(r2\)) N
() S 8 T (.endif) N
() S 8 T (;; must not modify neither r29 nor r30 nor r31 !!) N
() S 8 T (;; r15 is display_list address) N
() S 8 T (;; r14 is logical list address) N
(*) S 8 T (movei) S 16 T (#active_display_list,r1) N
(*) S 8 T (load) S 16 T (\(r1\),r1) N
(*) S 8 T (moveq) S 16 T (#DISPLAY_LOG,r14) N
() S 8 T (movei) S 16 T (#DISPLAY_HASHTBL,r0) N
() S 8 T (add) S 16 T (r15,r0) S 24 T () S 32 T (; to hash table) N
(*) S 8 T (add) S 16 T (r1,r14) N
(*) S 8 T (addq) S 16 T (#4,r0) S 24 T () S 32 T (; skip previous field) N
(*) S 8 T (load) S 16 T (\(r14\),r14) S 32 T (; logical list) N
() S 8 T (.if) S 16 T (!DISPLAY_SWAP_METHOD) N
() S 8 T (movei) S 16 T (#DISPLAY_LIST,r2) N
() S 8 T (add) S 16 T (r2,r14) N
() S 8 T (.endif) N
() S 8 T (addq) S 16 T (#DISPLAY_Y,r15) N
() S 8 T (movei) S 16 T (#_a_vdb,r19) N
() S 8 T (load) S 16 T (\(r15\),r27) S 32 T (; DISPLAY_Y) S
(|DISPLAY_X) c n
() p 8 T (loadw) S 16 T (\(r19\),r19) S 32 T (; a_vdb) N
() S 8 T (moveq) S 16 T (#1<<DISPLAY_NB_LAYER,r3 ; layer counter) S 56 T () N
() S 8 T (addq) S 16 T (#1,r19) N
() S 8 T (movei) S 16 T (#.compute_one_layer,r20) N
() S 8 T (shrq) S 16 T (#1,r19) S 24 T () S 32 T (; \(a_vdb+1\)/2) N
() S 8 T (movei) S 16 T (#.do_layer,r21) N
() S 8 T (movei) S 16 T (#.do_layer_tst,r22) N
() S 8 T (movei) S 16 T (#.next_in_layer,r23) N
() S 8 T (movei) S 16 T (#.anim_off,r24) N
() S 8 T (movei) S 16 T (#.non_scaled_sprite,r25) N
() S 8 T (movei) S 16 T (#.y_height_ok,r26) N
(.compute_one_layer:) N
() S 8 T (;; r0 go through hash table) N
() S 8 T (;; r3 is the layer counter) N
() S 8 T (;; r14 is logical list pointer) N
() S 8 T (;; r19 is \(a_vdb+1\)) N
() S 8 T (;; r27 is DISPLAY_Y) S
(|DISPLAY_X) c n
() p 8 T (load) S 16 T (\(r0\),r4) S 24 T () S 32 T (; read attribute) N
() S 8 T (addq) S 16 T (#4,r0) N
() S 8 T (sharq) S 16 T (#1,r4) S 24 T () S 32 T (; test hidden flag) N
() S 8 T (jr) S 16 T (cs,.layer_visible ; if set then the layer is visible) N
() S 8 T (moveq) S 16 T (#0,r15) S 24 T () S 32 T (; simulate empty layer) N
() S 8 T (jump) S 16 T (\(r22\)) S 24 T () S 32 T (; test if layer is empty) N
() S 8 T (addq) S 16 T (#12,r0) S 24 T () S 32 T (; next layer) N
(.layer_visible:) S 16 T () N
() S 8 T (load) S 16 T (\(r0\),r28) S 32 T (; LAYER_Y) S
(|LAYER_X) c n
() p 8 T (addq) S 16 T (#8,r0) S 24 T () S 32 T (; go to "next" field) N
() S 8 T (move) S 16 T (r27,r1) N
() S 8 T (move) S 16 T (r28,r2) N
() S 8 T (shlq) S 16 T (#16,r1) N
() S 8 T (shlq) S 16 T (#16,r2) N
() S 8 T (sharq) S 16 T (#16,r28) S 24 T () S 32 T (; LAYER_Y) N
() S 8 T (add) S 16 T (r2,r1) S 24 T () S 32 T (; DISPLAY_X+LAYER_X) S
(|0) c n
(display.s) (Page 5/12) (01 sep 07 11:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (move) S 16 T (r27,r2) N
() S 8 T (sharq) S 16 T (#16,r1) S 24 T () S 32 T (; DISPLAY_X+LAYER_X) N
() S 8 T (sharq) S 16 T (#16,r2) S 24 T () S 32 T (; DISPLAY_Y) N
() S 8 T (add) S 16 T (r28,r2) S 24 T () S 32 T (; DISPLAY_Y+LAYER_Y) N
() S 8 T (;; r1 is DISPLAY_X+LAYER_X) N
() S 8 T (;; r2 is DISPLAY_Y+LAYER_Y) N
() S 8 T (load) S 16 T (\(r0\),r15) S 32 T (; get sprite address) N
() S 8 T (jump) S 16 T (\(r22\)) S 24 T () S 32 T (; go test if layer is empty) N
() S 8 T (addq) S 16 T (#4,r0) S 24 T () S 32 T (; next layer in hash table) N
(.do_layer:) N
() S 8 T (load) S 16 T (\(r15+SPRITE_SND_PHRASE/4\),r4) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_INVISIBLE,r4) N
() S 8 T (jump) S 16 T (ne,\(r23\)) S 32 T () S 40 T () S 48 T () S 56 T (; if sprite invisible th) N
(en next_in_layer) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_ANIM_ON_OFF,r4) S 40 T () S 48 T () S 56 T (; is it animated?) N
() S 8 T (jump) S 16 T (eq,\(r24\)) S 32 T () S 40 T () S 48 T () S 56 T (; no then anim_off) N
() S 8 T (load) S 16 T (\(r15+\(SPRITE_SND_PHRASE+4\)/4\),r5) S 56 T (; ** load low bits of sn) N
(d phrase **) N
() S 8 T (.if) S 16 T (DISPLAY_USE_LEGACY_ANIMATION) N
(.anim_on:) N
() S 8 T (load) S 16 T (\(r15+SPRITE_ANIM_DATA/4\),r7) S 48 T (; anim settings) N
() S 8 T (load) S 16 T (\(r15+SPRITE_ANIM_ARRAY/4\),r6) S 48 T (; anim array address) N
() S 8 T (move) S 16 T (r7,r8) N
() S 8 T (move) S 16 T (r7,r9) N
() S 8 T (shrq) S 16 T (#24,r8) S 24 T () S 32 T (; 0) S
(|0|0|COUNTER) c n
() p 8 T (shlq) S 16 T (#16,r9) S 24 T () S 32 T (; INDEX.w) S
(|0|0) c n
() p 8 T (subq) S 16 T (#1,r8) S 24 T () S 32 T (; COUNTER--) N
() S 8 T (jr) S 16 T (ne,.anim_no_next ; if not null then do nothing special) N
() S 8 T (shrq) S 16 T (#14,r9) S 24 T () S 32 T (; 0) S
(|0|INDEX.w << 2) c n
(.anim_next:) p n
() S 8 T (move) S 16 T (r7,r8) N
() S 8 T (addq) S 16 T (#1<<2,r9) S 32 T (; INDEX++) N
() S 8 T (shrq) S 16 T (#16,r8) S 24 T () S 32 T (; ?) S
(|SPEED) c n
(.anim_no_next:) p n
() S 8 T (;; here the lower byte of r8 is the new COUNTER) N
() S 8 T (;; and the lower word of r9 contains the INDEX \(plus the loop flag\) shif) N
(ted by two bits) N
() S 8 T (bclr) S 16 T (#15+2,r9) S 32 T (; ignore loop flag) N
() S 8 T (move) S 16 T (r6,r10) S 24 T () S 32 T (; copy array address) N
() S 8 T (shlq) S 16 T (#8,r7) S 24 T () S 32 T (; SPEED) S
(|?|?|?) c n
() p 8 T (add) S 16 T (r9,r6) S 24 T () S 32 T (; array[index]) N
() S 8 T (shrq) S 16 T (#24,r7) S 24 T () S 32 T (; 0) S
(|0|0|SPEED) c n
() p 8 T (load) S 16 T (\(r6\),r6) S 24 T () S 32 T (; DATA address) N
() S 8 T (shlq) S 16 T (#16,r7) S 24 T () S 32 T (; 0) S
(|SPEED|0|0) c n
() p 8 T (cmpq) S 16 T (#0,r6) S 24 T () S 32 T (; is DATA address null ?) N
() S 8 T (jr) S 16 T (ne,.no_anim_index_fix) S 40 T (; no) N
() S 8 T (shlq) S 16 T (#24,r8) S 24 T () S 32 T (; COUNTER) S
(|0|0|0) c n
(.anim_index_fix:) p n
() S 8 T (moveq) S 16 T (#1,r9) S 24 T () S 32 T (; loop flag) N
() S 8 T (load) S 16 T (\(r10\),r6) S 32 T (; DATA address) N
() S 8 T (shlq) S 16 T (#17,r9) S 24 T () S 32 T (; loop flag set and INDEX = 0 ) N
(.no_anim_index_fix:) N
() S 8 T (or) S 16 T (r8,r7) S 24 T () S 32 T (; COUNTER) S
(|SPEED|0|0) c n
() p 8 T (shrq) S 16 T (#2,r9) S 24 T () S 32 T (; 0) S
(|0|INDEX.w) c n
() p 8 T (or) S 16 T (r9,r7) N
() S 8 T (jr) S 16 T () S
(.data) K
(_ok) p n
() S 8 T (store) S 16 T (r7,\(r15+SPRITE_ANIM_DATA/4\)) N
() S 8 T (.else) N
(.anim_on:) N
() S 8 T (load) S 16 T (\(r15+SPRITE_ANIM_DATA/4\),r7) S 48 T (; anim settings) N
() S 8 T (load) S 16 T (\(r15+SPRITE_ANIM_ARRAY/4\),r10) S 48 T (; anim array address) N
() S 8 T (move) S 16 T (r7,r8) N
(display.s) (Page 6/12) (01 sep 07 11:30) title
border
grestore
(Imprim\351 par Briais Sebastien) rhead
(display.s) (3/6) (jeudi 22 novembre 2007) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (shlq) S 16 T (#17,r7) S 24 T () S 32 T (; clear loop flag) N
() S 8 T (shrq) S 16 T (#16,r8) S 24 T () S 32 T (; COUNTER) N
() S 8 T (shrq) S 16 T (#14,r7) S 24 T () S 32 T (; INDEX<<3) N
() S 8 T (move) S 16 T (r10,r11) S 24 T () S 32 T (; copy array address) N
() S 8 T (add) S 16 T (r7,r10) N
() S 8 T (subq) S 16 T (#1,r8) N
() S 8 T (jr) S 16 T (ne,.anim_no_next) N
() S 8 T (shrq) S 16 T (#3,r7) S 24 T () S 32 T (; INDEX) N
(.anim_next:) N
() S 8 T (addq) S 16 T (#1<<3,r10) N
() S 8 T (addq) S 16 T (#1,r7) S 24 T () S 32 T (; INDEX++) N
() S 8 T (load) S 16 T (\(r10\),r6) S 32 T (; DATA address) N
() S 8 T (addq) S 16 T (#4,r10) N
() S 8 T (cmpq) S 16 T (#0,r6) S 24 T () S 32 T (; is DATA null ?) N
() S 8 T (jr) S 16 T (ne,.anim_write_data) N
() S 8 T (loadw) S 16 T (\(r10\),r8) S 32 T (; SPEED) N
() S 8 T (jr) S 16 T (.anim_index_fix) N
() S 8 T (move) S 16 T (r8,r7) S 24 T () S 32 T (; loop INDEX) N
(.anim_no_next:) N
() S 8 T (jr) S 16 T (.anim_write_data) N
() S 8 T (load) S 16 T (\(r10\),r6) S 32 T (; DATA address) N
(.anim_index_fix:) N
() S 8 T (shlq) S 16 T (#3,r8) N
() S 8 T () S
(bset) K
() p 16 T (#15,r7) S 24 T () S 32 T (; loop flag) N
() S 8 T (add) S 16 T (r8,r11) N
() S 8 T (load) S 16 T (\(r11\),r6) S 32 T (; DATA address) N
() S 8 T (addq) S 16 T (#4,r11) N
() S 8 T (loadw) S 16 T (\(r11\),r8) S 32 T (; SPEED) N
(.anim_write_data:) N
() S 8 T (;; r7 = INDEX + loop flag) N
() S 8 T (;; r8 = COUNTER) N
() S 8 T (shlq) S 16 T (#16,r8) N
() S 8 T (or) S 16 T (r8,r7) N
() S 8 T (jr) S 16 T () S
(.data) K
(_ok) p n
() S 8 T (store) S 16 T (r7,\(r15+SPRITE_ANIM_DATA/4\)) N
() S 8 T (.endif) N
(.anim_off:) N
() S 8 T (load) S 16 T (\(r15+SPRITE_DATA/4\),r6) N
(.data) K
(_ok:) p 16 T () N
() S 8 T (;; r4 contains the higher bits of snd phrase) N
() S 8 T (;; r5 contains the lower bits of snd phrase) N
() S 8 T (;; r6 contains DATA field \(in bytes\)) N
() S 8 T (shrq) S 16 T (#3,r6) S 24 T () S 32 T (; DATA in phrases) N
() S 8 T (load) S 16 T (\(r15+SPRITE_Y/4\),r7) S 40 T (; Y) S
(|X) c n
() p 8 T (move) S 16 T (r5,r9) N
() S 8 T (move) S 16 T (r7,r8) N
() S 8 T (shlq) S 16 T (#16,r7) N
() S 8 T (sharq) S 16 T (#16,r8) S 24 T () S 32 T (; Y) N
() S 8 T (sharq) S 16 T (#16,r7) S 24 T () S 32 T (; X) N
() S 8 T (shlq) S 16 T (#22,r9) S 24 T () S 32 T (; keep HEIGHT<<22) N
() S 8 T (add) S 16 T (r1,r7) S 24 T () S 32 T (; X+DISPLAY_X) N
() S 8 T (cmpq) S 16 T (#0,r9) S 24 T () S 32 T (; HEIGHT = 0 ?) N
() S 8 T (jump) S 16 T (eq,\(r23\)) S 32 T (; yes -> .next_in_layer) N
() S 8 T (shrq) S 16 T (#22,r9) S 24 T () S 32 T (; HEIGHT) N
() S 8 T (add) S 16 T (r2,r8) S 24 T () S 32 T (; Y+DISPLAY_Y) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_TYPE,r4) N
() S 8 T (jump) S 16 T (eq,\(r25\)) S 32 T (; if non scaled sprite then .non_scaled_sprite) N
() S 8 T (shrq) S 16 T (#12,r5) S 24 T () S 32 T (; clear for HEIGHT field) N
(.scaled_sprite:) N
() S 8 T (subq) S 16 T (#1,r9) S 24 T () S 32 T (; HEIGHT-- \(fix for scaled sprites\)) N
() S 8 T (jump) S 16 T (eq,\(r23\)) S 32 T (; if HEIGHT = 0 then .next_in_layer) N
() S 8 T (move) S 16 T (r5,r11) S 24 T () S 32 T (; to get DWIDTH) N
(display.s) (Page 7/12) (01 sep 07 11:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (load) S 16 T (\(r15+SPRITE_SCALE/4\),r12 ; load scale values) N
() S 8 T (shrq) S 16 T (#6,r11) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_USE_HOTSPOT,r4 ; check if HOTSPOT is used) N
() S 8 T (jr) S 16 T (eq,.jump_scaled_no_hotspot ; no then nothing to fix) N
() S 8 T (nop) N
() S 8 T (load) S 16 T (\(r15+SPRITE_HY/4\),r16 ; load hotspot shifts) N
() S 8 T (move) S 16 T (r12,r18) S 24 T () S 32 T (; get scales) N
() S 8 T (move) S 16 T (r16,r17) N
() S 8 T (shlq) S 16 T (#16,r18) S 24 T () S 32 T (; to get VSCALE) N
() S 8 T (sharq) S 16 T (#16,r16) S 24 T () S 32 T (; HY) N
() S 8 T (shrq) S 16 T (#24,r18) S 24 T () S 32 T (; VSCALE) N
() S 8 T (shlq) S 16 T (#16,r17) S 24 T () S 32 T (; to get HX) N
() S 8 T (imult) S 16 T (r18,r16) S 24 T () S 32 T (; HY*VSCALE) N
() S 8 T (jr) S 16 T (.scaled_continue_hotspot) N
() S 8 T (move) S 16 T (r12,r18) S 24 T () S 32 T (; get scales) N
(.jump_scaled_no_hotspot:) N
() S 8 T (jr) S 16 T (.scaled_no_hotspot ; trick to have short jumps ) N
(.scaled_continue_hotspot:) N
() S 8 T (sharq) S 16 T (#16,r17) S 24 T () S 32 T (; HX) N
() S 8 T (shlq) S 16 T (#24,r18) S 24 T () S 32 T (; to get HSCALE) N
() S 8 T (sharq) S 16 T (#5,r16) S 24 T () S 32 T (; get integer part of HY*VSCALE) N
() S 8 T (shrq) S 16 T (#24,r18) S 24 T () S 32 T (; HSCALE) N
() S 8 T (sub) S 16 T (r16,r8) S 24 T () S 32 T (; Y -= HY*VSCALE) N
() S 8 T (imult) S 16 T (r18,r17) S 24 T () S 32 T (; HX*HSCALE) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_REFLECT,r4 ; REFLECT?) N
() S 8 T (jr) S 16 T (eq,.scaled_hotspot_no_reflect) N
() S 8 T (sharq) S 16 T (#5,r17) S 24 T () S 32 T (; get integer part of HX*HSCALE) N
() S 8 T (neg) S 16 T (r17) S 24 T () S 32 T (; negate HX) N
(.scaled_hotspot_no_reflect:) N
() S 8 T (sub) S 16 T (r17,r7) S 24 T () S 32 T (; X -= HX*HSCALE) N
(.scaled_no_hotspot:) S 24 T () N
() S 8 T (cmpq) S 16 T (#0,r8) N
() S 8 T (jr) S 16 T (pl,.jump_scaled_y_positive) S 48 T (; .scaled_y_positive) N
() S 8 T (shlq) S 16 T (#22,r11) S 24 T () S 32 T (; DWIDTH << 22) N
() S 8 T (move) S 16 T (r12,r10) N
() S 8 T (shlq) S 16 T (#16,r12) S 24 T () S 32 T (; clear REMAINDER) N
() S 8 T (shrq) S 16 T (#16,r10) S 24 T () S 32 T (; keep REMAINDER) N
() S 8 T (move) S 16 T (r12,r13) N
() S 8 T (shlq) S 16 T (#24,r10) S 24 T () S 32 T (; REMAINDER in higher byte) N
() S 8 T (shrq) S 16 T (#24,r13) S 24 T () S 32 T (; keep VSCALE) N
() S 8 T (shrq) S 16 T (#16,r12) S 24 T () S 32 T (; VSCALE) S
(|HSCALE) c n
() p 8 T (moveq) S 16 T (#1,r16) N
() S 8 T (shlq) S 16 T (#24,r13) S 24 T () S 32 T (; VSCALE in higher byte) N
() S 8 T (shlq) S 16 T (#5+24,r16) S 32 T (; 1<<5 in higher byte) N
() S 8 T (jr) S 16 T (.scaled_sprite_fix_y) N
() S 8 T (shrq) S 16 T (#22,r11) S 24 T () S 32 T (; DWIDTH) N
(.jump_scaled_y_positive:) N
() S 8 T (jr) S 16 T (.scaled_y_positive ; trick to have short jumps) N
(.scaled_sprite_fix_y:) N
() S 8 T (sub) S 16 T (r16,r10) S 24 T () S 32 T (; REMAINDER--) N
() S 8 T (jr) S 16 T (cc,.scaled_sprite_fix_y_no_add_vscale ; no carry) N
() S 8 T (nop) N
(.scaled_sprite_fix_y_add_vscale:) N
() S 8 T (add) S 16 T (r11,r6) S 24 T () S 32 T (; fix DATA) N
() S 8 T (subq) S 16 T (#1,r9) S 24 T () S 32 T (; HEIGHT--) N
() S 8 T (jump) S 16 T (eq,\(r23\)) S 32 T (; if HEIGHT = 0 then .next_in_layer) N
() S 8 T (add) S 16 T (r13,r10) S 24 T () S 32 T (; add VSCALE to REMAINDER) N
() S 8 T (jr) S 16 T (cc,.scaled_sprite_fix_y_add_vscale) N
() S 8 T (nop) N
(.scaled_sprite_fix_y_no_add_vscale:) N
() S 8 T (addq) S 16 T (#1,r8) S 24 T () S 32 T () S 40 T () S 48 T (; Y++) N
() S 8 T (jr) S 16 T (ne,.scaled_sprite_fix_y) S 40 T () S 48 T (; not null? ) N
(display.s) (Page 8/12) (01 sep 07 11:30) title
border
grestore
(Imprim\351 par Briais Sebastien) rhead
(display.s) (4/6) (jeudi 22 novembre 2007) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (nop) N
() S 8 T (shrq) S 16 T (#8,r10) N
() S 8 T (or) S 16 T (r10,r12) N
(.scaled_y_positive:) N
() S 8 T (store) S 16 T (r12,\(r14+5\)) S 32 T (; write scale values) N
() S 8 T (jump) S 16 T (\(r26\)) S 24 T () S 32 T (; goto .y_height_ok) N
() S 8 T (moveq) S 16 T (#SCBITOBJ,r10) S 32 T (; set TYPE to SCBITOBJ) N
(.non_scaled_sprite:) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_USE_HOTSPOT,r4 ; check if HOTSPOT is used) N
() S 8 T (jr) S 16 T (eq,.nonscaled_no_hotspot ; no then nothing to fix) N
() S 8 T (nop) N
() S 8 T (load) S 16 T (\(r15+SPRITE_HY/4\),r16) S 40 T (; load hotspot shifts) N
() S 8 T (move) S 16 T (r16,r17) N
() S 8 T (sharq) S 16 T (#16,r16) S 24 T () S 32 T (; HY) N
() S 8 T (shlq) S 16 T (#16,r17) S 24 T () S 32 T (; to get HX) N
() S 8 T (sub) S 16 T (r16,r8) S 24 T () S 32 T (; Y -= HY) N
() S 8 T () S
(btst) K
() p 16 T (#SPRITE_REFLECT,r4 ; REFLECT?) N
() S 8 T (jr) S 16 T (eq,.non_scaled_hotspot_no_reflect) N
() S 8 T (sharq) S 16 T (#16,r17) S 24 T () S 32 T (; HX) N
() S 8 T (neg) S 16 T (r17) S 24 T () S 32 T (; negate HX) N
(.non_scaled_hotspot_no_reflect:) S 32 T () N
() S 8 T (sub) S 16 T (r17,r7) S 24 T () S 32 T (; X -= HX) N
(.nonscaled_no_hotspot:) S 24 T () N
() S 8 T (cmpq) S 16 T (#0,r8) N
() S 8 T (jr) S 16 T (pl,.non_scaled_y_positive ; if Y >= 0 then nothing to do) N
() S 8 T (moveq) S 16 T (#BITOBJ,r10) S 32 T (; set TYPE to BITOBJ) N
() S 8 T (move) S 16 T (r5,r11) S 24 T () S 32 T (; to get DWIDTH) N
() S 8 T (add) S 16 T (r8,r9) S 24 T () S 32 T (; adjust HEIGHT) N
() S 8 T (jump) S 16 T (mi,\(r23\)) S 32 T (; if HEIGHT <= 0 then .next_in_layer) N
() S 8 T (shrq) S 16 T (#6,r11) N
() S 8 T (neg) S 16 T (r8) S 24 T () S 32 T (; get ) S
(|Y|) c n
() p 8 T (shlq) S 16 T (#22,r11) S 24 T () S 32 T (; DWIDTH << 22) N
() S 8 T (shrq) S 16 T (#22,r11) S 24 T () S 32 T (; DWIDTH) N
() S 8 T (mult) S 16 T (r8,r11) S 24 T () S 32 T (; ) S
(|Y|*DWIDTH) c n
() p 8 T (moveq) S 16 T (#0,r8) S 24 T () S 32 T (; Y = 0) N
() S 8 T (add) S 16 T (r11,r6) S 24 T () S 32 T (; fix DATA) N
(.non_scaled_y_positive:) S 24 T () N
(.y_height_ok:) N
() S 8 T (;; r4 contains the higher bits of snd phrase) N
() S 8 T (;; r5 has been shifted right by 12 bits) N
() S 8 T (;; r6 contains DATA \(in phrases\)) N
() S 8 T (;; r7 contains X) N
() S 8 T (;; r8 contains Y) N
() S 8 T (;; r9 contains HEIGHT) N
() S 8 T (;; r10 contains TYPE) N
() S 8 T (add) S 16 T (r19,r8) S 24 T () S 32 T (; Y+\(a_vdb+1\)/2) N
() S 8 T (shlq) S 16 T (#12,r5) S 24 T () S 32 T (; lower bits of snd phrase ready to receive XPOS) N
() S 8 T (shlq) S 16 T (#1+21,r8) S 32 T (; Y*2 << 21) N
() S 8 T (shlq) S 16 T (#20,r7) S 24 T () S 32 T (; keep only the 12 lower bits of X) N
() S 8 T (shrq) S 16 T (#18,r8) S 24 T () S 32 T (; YPOS) N
() S 8 T (shlq) S 16 T (#22,r9) N
() S 8 T (or) S 16 T (r8,r10) S 24 T () S 32 T (; YPOS) S
(|TYPE) c n
() p 8 T (move) S 16 T (r14,r11) S 24 T () S 32 T (; LINK) N
() S 8 T (store) S 16 T (r4,\(r14+2\)) S 32 T (; write higher bit of snd phrase) N
() S 8 T (shrq) S 16 T (#8,r9) S 24 T () S 32 T (; HEIGHT ready) N
() S 8 T (shrq) S 16 T (#3,r11) S 24 T () S 32 T (; in phrases) N
() S 8 T (or) S 16 T (r9,r10) S 24 T () S 32 T (; HEIGHT) S
(|YPOS|TYPE) c n
() p 8 T (addq) S 16 T (#4,r11) S 24 T () S 32 T (; next LINK \(4 phrases after\)) N
() S 8 T (shrq) S 16 T (#20,r7) S 24 T () S 32 T (; XPOS) N
() S 8 T (move) S 16 T (r11,r12) S 24 T () S 32 T (; copy next LINK) N
() S 8 T (or) S 16 T (r7,r5) S 24 T () S 32 T (; lower bits of snd phrase ready) N
() S 8 T (move) S 16 T (r12,r13) S 24 T () S 32 T (; copy next LINK) N
(display.s) (Page 9/12) (01 sep 07 11:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (store) S 16 T (r5,\(r14+3\)) S 32 T (; write lower bits of snd phrase) N
() S 8 T (shlq) S 16 T (#24,r11) N
() S 8 T (shrq) S 16 T (#8,r12) N
() S 8 T (or) S 16 T (r11,r10) S 24 T () S 32 T (; lower bits of first phrase ready) N
() S 8 T (shlq) S 16 T (#11,r6) N
() S 8 T (store) S 16 T (r10,\(r14+1\)) S 32 T (; write lower bits of first phrase) N
() S 8 T (or) S 16 T (r12,r6) S 24 T () S 32 T (; higher bits of first phrase ready) N
() S 8 T (shlq) S 16 T (#3,r13) S 24 T () S 32 T (; prepare next LINK) N
() S 8 T (store) S 16 T (r6,\(r14\)) N
() S 8 T (move) S 16 T (r13,r14) S 24 T () S 32 T (; next object address) N
(.next_in_layer:) N
() S 8 T (load) S 16 T (\(r15+SPRITE_NEXT/4\),r15) N
(.do_layer_tst:) S 16 T () N
() S 8 T (cmpq) S 16 T (#0,r15) S 24 T () S 32 T (; is sprite address null ?) N
() S 8 T (jump) S 16 T (ne,\(r21\)) S 32 T (; if not then continue in layer) N
() S 8 T (nop) N
(.end_layer:) N
() S 8 T (subq) S 16 T (#1,r3) S 24 T () S 32 T (; one layer less) N
() S 8 T (jump) S 16 T (ne,\(r20\)) S 32 T (; is it finished?) N
() S 8 T (nop) N
() S 8 T (;; write a final stop object) N
() S 8 T (moveq) S 16 T (#STOPOBJ,r0) N
() S 8 T (or) S 16 T (r0,r0) N
() S 8 T (store) S 16 T (r0,\(r14+1\)) N
(.gpu_display_end_it:) N
() S 8 T (movei) S 16 T (#_vblCounter,r28) N
() S 8 T (loadw) S 16 T (\(r28\),r26) N
() S 8 T (movei) S 16 T (#displayCounter,r28) N
() S 8 T (storew) S 16 T (r26,\(r28\)) N
() S 8 T (.if) S 16 T (DISPLAY_IT_SAVE_REGS) N
() S 8 T (display_restore_other_regs) N
() S 8 T (display_restore_first_regs) N
() S 8 T (.endif) N
() S 8 T (load) S 16 T (\(r31\),r28) S 32 T (; return address) N
() S 8 T (bclr) S 16 T (#3,r29) S 24 T () S 32 T (; clear IMASK) N
() S 8 T (addq) S 16 T (#2,r28) S 24 T () S 32 T (; next instruction) N
() S 8 T (addq) S 16 T (#4,r31) S 24 T () S 32 T (; pop from stack) N
() S 8 T (jump) S 16 T (t,\(r28\)) S 24 T () S 32 T (; return) N
() S 8 T (store) S 16 T (r29,\(r30\)) S 32 T (; restore flags) N
(.gpu_display_driver_loop:) N
() S 8 T (movei) S 16 T (#.gpu_display_driver_param,r0) N
() S 8 T (movei) S 16 T (#.gpu_display_driver_loop,r1) N
() S 8 T (load) S 16 T (\(r0\),r2) S 24 T () S 32 T (; read SUBROUT_ADDR) N
() S 8 T (moveq) S 16 T (#0,r3) N
() S 8 T (cmpq) S 16 T (#0,r2) S 24 T () S 32 T (; SUBROUT_ADDR != null) N
() S 8 T (jr) S 16 T (eq,.gpu_display_driver_loop ; if null then loop) N
() S 8 T (nop) N
() S 8 T (subq) S 16 T (#4,r31) S 24 T () S 32 T (; push on stack) N
() S 8 T (store) S 16 T (r3,\(r0\)) S 24 T () S 32 T (; clear SUBROUT_ADDR) N
() S 8 T (jump) S 16 T (\(r2\)) S 24 T () S 32 T (; jump to SUBROUT_ADDR) N
() S 8 T (store) S 16 T (r1,\(r31\)) S 32 T (; return address) N
() S 8 T () S
(.long) K n
(.gpu_display_driver_param:) p n
(GPU_SUBROUT_ADDR) S 24 T (equ) S 32 T (.gpu_display_driver_param) N
() S 8 T (dc.l) S 16 T (0) N
() S 8 T () S
(.long) K n
(.gpu_display_driver_init:) p n
() S 8 T (;; assume run from bank 1) N
() S 8 T (movei) S 16 T (#GPU_ISP+\(GPU_STACK_SIZE*4\),r31) S 48 T (; init isp) N
() S 8 T (moveq) S 16 T (#0,r1) N
() S 8 T (moveta) S 16 T (r31,r31) S 24 T () S 32 T (; ISP \(bank 0\)) N
() S 8 T (movei) S 16 T (#.gpu_display_driver_param,r0) N
(display.s) (Page 10/12) (01 sep 07 11:30) title
border
grestore
(Imprim\351 par Briais Sebastien) rhead
(display.s) (5/6) (jeudi 22 novembre 2007) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (movei) S 16 T (#.gpu_display_driver_loop,r2) N
() S 8 T (movei) S 16 T (#GPU_USP+\(GPU_STACK_SIZE*4\),r31) S 48 T (; init usp) N
() S 8 T (;; enable interrupts) N
() S 8 T (movei) S 16 T (#G_FLAGS,r28) N
() S 8 T (.if) S 16 T (DISPLAY_USE_OP_IT) N
() S 8 T (movei) S 16 T (#G_OPENA) S
(|REGPAGE,r29) c n
() p 8 T (.else) N
() S 8 T (movei) S 16 T (#G_CPUENA) S
(|REGPAGE,r29) c n
() p 8 T (.endif) N
() S 8 T (store) S 16 T (r29,\(r28\)) N
() S 8 T (;; jump to driver) N
() S 8 T (jump) S 16 T (\(r2\)) N
() S 8 T (store) S 16 T (r1,\(r0\)) S 24 T () S 32 T (; clear SUBROUT_ADDR \(mutex\)) N
() S 8 T () S
(.long) K n
(.gpu_display_driver_end:) p n
() S 8 T () S 16 T () N
(DISPLAY_DRIVER_INIT) S 24 T (equ) S 32 T (.gpu_display_driver_init) N
(DISPLAY_DRIVER_SIZE) S 24 T (equ) S 32 T (.gpu_display_driver_end-.gpu_display_driver_begi) N
(n) N
() N
(GPU_FREE_RAM) S 16 T () S 24 T (set) S 32 T (.gpu_display_driver_init) N
() N
() S 8 T (.print) S 16 T ("Display manager code size \(GPU\): ", DISPLAY_DRIVER_SIZE) N
() S 8 T (.print) S 16 T ("Available GPU Ram after G_RAM+",GPU_FREE_RAM-G_RAM) N
() S 8 T () S 16 T () S 24 T () S 32 T () N
() S 8 T (.68000) N
() N
() S 8 T () S
(.globl) K
() p 16 T (GPU_SUBROUT_ADDR) N
() S 8 T () S
(.globl) K
() p 16 T (__GPU_FREE_RAM) N
(__GPU_FREE_RAM) S 16 T (equ) S 24 T (GPU_FREE_RAM) N
() N
() S 8 T () S
(.globl) K
() p 16 T (_init_display_driver) S 40 T () N
(_init_display_driver:) N
() S 8 T (move.l) S 16 T (#0,G_CTRL) N
() S 8 T (move.l) S 16 T (#_stop_object,d0) N
() S 8 T (swap) S 16 T (d0) N
() S 8 T (move.l) S 16 T (d0,OLP) N
() S 8 T (.if) S 16 T (!\(DISPLAY_USE_OP_IT&!DISPLAY_OP_IT_COMP_PT\)) N
() S 8 T (clr.l) S 16 T (active_display_list) N
() S 8 T (.endif) N
() S 8 T (clr.w) S 16 T (displayCounter) N
() S 8 T (;; copy GPU code) N
() S 8 T (pea) S 16 T (DISPLAY_DRIVER_SIZE) S 40 T () N
() S 8 T (pea) S 16 T (G_RAM) N
() S 8 T (pea) S 16 T (gpu_display_driver) N
() S 8 T () S
(jsr) K
() p 16 T (_bcopy) N
() S 8 T (lea) S 16 T (12\(sp\),sp) N
() S 8 T (;; set GPU for interrupts) N
() S 8 T (move.l) S 16 T (#REGPAGE,G_FLAGS) N
() S 8 T (;; launch the driver) N
() S 8 T (move.l) S 16 T (#GPU_SUBROUT_ADDR,a0) N
() S 8 T (move.l) S 16 T (#$ffffffff,\(a0\)) N
() S 8 T (move.l) S 16 T (#DISPLAY_DRIVER_INIT,G_PC) N
() S 8 T (move.l) S 16 T (#GPUGO,G_CTRL) N
(.wait_init:) N
() S 8 T (tst.l) S 16 T (\(a0\)) N
() S 8 T (bne.s) S 16 T (.wait_init) N
() S 8 T (move.w) S 16 T (#0,OBF) N
() S 8 T () S
(rts) K n
() p n
() S 8 T () S
(.globl) K
() p 16 T (_show_display) N
(_show_display:) N
(display.s) (Page 11/12) (01 sep 07 11:30) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (move.l) S 16 T (4\(sp\),d0) N
() S 8 T (.if) S 16 T (!\(DISPLAY_USE_OP_IT&!DISPLAY_OP_IT_COMP_PT\)) N
() S 8 T (move.l) S 16 T (d0,active_display_list) N
() S 8 T (.endif) N
() S 8 T (.if) S 16 T (DISPLAY_SWAP_METHOD) N
() S 8 T (add.l) S 16 T (#DISPLAY_LIST,d0) N
() S 8 T (swap) S 16 T (d0) N
() S 8 T (move.l) S 16 T (d0,OLP) N
() S 8 T (.else) N
() S 8 T (move.l) S 16 T (d0,a0) N
() S 8 T (move.l) S 16 T (DISPLAY_PHYS\(a0\),d0) N
() S 8 T (swap) S 16 T (d0) N
() S 8 T (move.l) S 16 T (d0,OLP) N
() S 8 T (.endif) N
() S 8 T () S
(rts) K n
() p n
() S 8 T () S
(.globl) K
() p 16 T (_hide_display) N
(_hide_display:) N
() S 8 T (move.l) S 16 T (#_stop_object,d0) N
() S 8 T (swap) S 16 T (d0) N
() S 8 T (move.l) S 16 T (d0,OLP) N
() S 8 T () S
(rts) K n
() p 8 T () N
() S 8 T () S
(.globl) K
() p 16 T (_jump_gpu_subroutine) N
(_jump_gpu_subroutine:) N
() S 8 T (move.l) S 16 T (4\(sp\),GPU_SUBROUT_ADDR) N
() S 8 T () S
(rts) K n
() p n
() S 8 T () S
(.globl) K
() p 16 T (_wait_display_refresh) N
(_wait_display_refresh:) N
() S 8 T (move.l) S 16 T (#_vblCounter,a0) N
() S 8 T (move.l) S 16 T (#displayCounter,a1) N
(.wait:) N
() S 8 T (move.w) S 16 T (\(a0\),d0) S 24 T () S 32 T (; inside the loop because interrupts can occur a) N
(t any time) N
() S 8 T (cmp.w) S 16 T (\(a1\),d0) N
() S 8 T (bne.s) S 16 T (.wait) N
() S 8 T () S
(rts) K n
() p n
() S 8 T (.bss) N
() S 8 T () N
() S 8 T (.if) S 16 T (!\(DISPLAY_USE_OP_IT&!DISPLAY_OP_IT_COMP_PT\)) S 64 T () N
() S 8 T () S
(.long) K n
(active_display_list:) p 24 T (ds.l) S 32 T (1) N
() S 8 T (.endif) N
() N
() S 8 T (.bss) N
(displayCounter:) S 16 T () N
() S 8 T (ds.w) S 16 T (1) N
() S 8 T () S 16 T () S 24 T () N
() S 8 T () S
(.data) K n
() p 8 T (.even) N
() S 8 T (dc.b) S 16 T ("Display Driver by Seb/The Removers") N
() S 8 T (.even) N
() N
() N
(display.s) (Page 12/12) (01 sep 07 11:30) title
border
grestore
(Imprim\351 par Briais Sebastien) rhead
(display.s) (6/6) (jeudi 22 novembre 2007) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
